<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
        xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
             xmlns:mvc="http://www.springframework.org/schema/mvc"
             xmlns:context="http://www.springframework.org/schema/context"
             xmlns:util="http://www.springframework.org/schema/util"
             xmlns:aop="http://www.springframework.org/schema/aop"
             xmlns:task="http://www.springframework.org/schema/task"
             xmlns:tx="http://www.springframework.org/schema/tx"
             xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
        http://www.springframework.org/schema/mvc http://www.springframework.org/schema/mvc/spring-mvc.xsd
        http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd
        http://www.springframework.org/schema/util http://www.springframework.org/schema/util/spring-util.xsd
        http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop.xsd
        http://www.springframework.org/schema/task http://www.springframework.org/schema/task/spring-task.xsd
        http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx.xsd">

    <!-- DispatcherServlet Context: defines this servlet's request-processing infrastructure test-->

    <!-- Enables the Spring MVC @Controller programming model -->
    <mvc:annotation-driven />
    <!-- 支持异步方法执行 -->
    <task:annotation-driven/>

    <context:annotation-config/>
    <context:component-scan base-package="com.share.commons" ></context:component-scan>

    <mvc:resources mapping="/resources/**" location="/resources/"/>

    <bean class="com.share.commons.SpringContext"/>

    <!-- 处理request body -->
    <bean class="org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter">
        <property name="ignoreDefaultModelOnRedirect" value="true"/>
        <property name="messageConverters">
            <util:list>
                <ref bean="mappingJacksonHttpMessageConverter"/>
            </util:list>
        </property>
    </bean>

    <bean id="mappingJacksonHttpMessageConverter"
                class="org.springframework.http.converter.json.MappingJacksonHttpMessageConverter">
        <property name="supportedMediaTypes">
            <list>
                <value>application/json;charset=UTF-8</value>
            </list>
        </property>
    </bean>

    <!-- Aop切面记录日志 start -->
    <aop:config>
        <aop:aspect id="aroundMethod" ref="performanceAopAdvice">
            <aop:pointcut id="performanceMonitorPoint"
                          expression="execution(* com.share.commons.web.service.*.*(..)))" />
            <aop:around pointcut-ref="performanceMonitorPoint" method="aroundMethod" />
        </aop:aspect>
    </aop:config>
    <bean id="logHolder" class="com.share.commons.log.impl.LogBean">
        <property name="businessLine" value="online"></property>
        <property name="appName" value="mapi-business"></property>
        <property name="span" value="mapi-business"></property>
    </bean>
    <bean id="performanceAopAdvice"
                class="com.share.commons.log.PerformanceAopAdvice">
    </bean>


    <!-- freemarker 相关 -->
    <bean id="freemarkerConfig" class="com.share.commons.mvc.view.ViewConfigurer">
        <property name="templateLoaderPath" value="/WEB-INF/views/"/>
        <property name="defaultEncoding" value="utf-8"/>
        <property name="freemarkerSettings">
            <props>
                <prop key="template_update_delay">10</prop>
                <prop key="locale">zh_CN</prop>
                <prop key="datetime_format">yyyy-MM-dd</prop>
                <prop key="date_format">yyyy-MM-dd</prop>
                <prop key="number_format">#.##</prop>
            </props>
        </property>
    </bean>
    <!-- 页面解析器，当Controller返回XXX字符串时，先通过拦截器，然后该类就会在/WEB-INF/views/目录下，查找XXX.jsp文件-->
    <bean class="com.share.commons.mvc.view.ViewPageResolver">
        <property name="viewClass" value="org.springframework.web.servlet.view.freemarker.FreeMarkerView"/>
        <!--<property name="prefix" value="/WEB-INF/views/"></property>-->
        <property name="suffix" value=".ftl"/>
        <property name="contentType" value="text/html;charset=UTF-8" />
        <property name="exposeRequestAttributes" value="true"/>
        <property name="exposeSessionAttributes" value="true"/>
        <property name="exposeSpringMacroHelpers" value="true"/>
    </bean>


    <!-- 配置数据源 start -->
    <!-- 公共的数据源配置 -->
    <util:properties id="dbConfig" location="classpath:/config/jdbc.properties"></util:properties>
    <!-- 写入数据源 start -->
    <bean id="writeDataSource" class="org.apache.commons.dbcp.BasicDataSource"
                lazy-init="default" autowire="default" destroy-method="close">
        <property name="driverClassName" value="#{dbConfig['write.driver']}"></property>
        <property name="url" value="#{dbConfig['write.url']}"></property>
        <property name="username" value="#{dbConfig['write.user']}"></property>
        <property name="password" value="#{dbConfig['write.password']}"></property>
        <property name="maxWait" value="#{dbConfig['write.maxWait']}"></property>
        <property name="testWhileIdle" value="#{dbConfig['write.testWhileIdle']}"></property>
        <property name="removeAbandoned" value="#{dbConfig['write.removeAbandoned']}"></property>
        <property name="removeAbandonedTimeout" value="#{dbConfig['write.removeAbandonedTimeout']}"></property>
        <property name="timeBetweenEvictionRunsMillis"
                        value="#{dbConfig['write.timeBetweenEvictionRunsMillis']}"></property>
        <property name="maxActive" value="#{dbConfig['write.maxActive']}"></property>
        <property name="maxIdle" value="#{dbConfig['write.maxIdle']}"></property>
    </bean>

    <!-- 读数据源 start -->
    <bean id="readDataSource" class="org.apache.commons.dbcp.BasicDataSource"
                lazy-init="default" autowire="default" destroy-method="close">
        <property name="driverClassName" value="#{dbConfig['read.driver']}"></property>
        <property name="url" value="#{dbConfig['read.url']}"></property>
        <property name="username" value="#{dbConfig['read.user']}"></property>
        <property name="password" value="#{dbConfig['read.password']}"></property>
        <property name="maxWait" value="#{dbConfig['read.maxWait']}"></property>
        <property name="testWhileIdle" value="#{dbConfig['read.testWhileIdle']}"></property>
        <property name="removeAbandoned" value="#{dbConfig['read.removeAbandoned']}"></property>
        <property name="removeAbandonedTimeout" value="#{dbConfig['read.removeAbandonedTimeout']}"></property>
        <property name="timeBetweenEvictionRunsMillis"
                        value="#{dbConfig['read.timeBetweenEvictionRunsMillis']}"></property>
        <property name="maxActive" value="#{dbConfig['read.maxActive']}"></property>
        <property name="maxIdle" value="#{dbConfig['read.maxIdle']}"></property>

    </bean>
    <!--end 读数据源 -->
    <bean id="dataSource" class="com.share.commons.data.datasource.DynamicDataSource">
        <property name="targetDataSources">
            <map key-type="java.lang.String">
                <entry key="writeDataSource" value-ref="writeDataSource"/>
                <entry key="readDataSource" value-ref="readDataSource"/>
            </map>
        </property>
        <property name="defaultTargetDataSource" ref="writeDataSource"/>
        <property name="defaultDataSourceKey" value="writeDataSource"/>
    </bean>
    <!-- aop start -->
    <!--<bean id="serviceAop" class="com.mystudy.web.common.aop.ServiceAop"/>-->
    <bean id="annotationMultipleDataSourceAdvice"
                class="com.share.commons.data.datasource.impl.AnnotationMultipleDataSourceAdvice"/>

    <aop:config>
        <aop:pointcut id="servicePoint" expression="execution(* com.share.commons.web.service.*.*(..))"/>
        <aop:advisor advice-ref="annotationMultipleDataSourceAdvice" pointcut-ref="servicePoint"/>
        <!--<aop:aspect id="aroundMethod" ref="serviceAop">-->
        <!--<aop:around pointcut-ref="servicePoint" method="around"/>-->
        <!--</aop:aspect>-->
    </aop:config>

    <bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
        <property name="configLocation" value="classpath:config/spring/mybatis-config.xml"></property>
        <!-- domain的包路径，类似MyBatis的typeAliases配置 -->
        <property name="typeAliasesPackage" value="com.share.commons.web.model"/>
        <!-- mapper配置文件的路径，类似MyBatis的mappers配置 -->
        <property name="mapperLocations" value="classpath:config/mapper/*.xml"/>
        <property name="dataSource" ref="dataSource"/>
    </bean>

    <bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
        <property name="basePackage" value="com.share.commons.web.dao"/>
    </bean>

    <bean id="transactionManager"
                class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
        <property name="dataSource" ref="dataSource"/>
    </bean>

    <tx:annotation-driven transaction-manager="transactionManager"/>
    <!-- 配置数据源 end -->

    <!-- 配置quartz start-->
    <bean id="schedulerFactory" class="org.springframework.scheduling.quartz.SchedulerFactoryBean" >
        <property name="dataSource" ref="dataSource"/>
        <property name="taskExecutor" ref="quartzThreadPool"/>
        <property name="transactionManager" ref="transactionManager"/>
        <property name="quartzProperties">
            <props>
                <prop key="org.quartz.scheduler.instanceName">CacheCloudScheduler</prop>
                <prop key="org.quartz.scheduler.instanceId">AUTO</prop>
                <prop key="org.quartz.jobStore.class">org.quartz.impl.jdbcjobstore.JobStoreTX</prop>
                <prop key="org.quartz.jobStore.driverDelegateClass">org.quartz.impl.jdbcjobstore.StdJDBCDelegate</prop>
                <prop key="org.quartz.jobStore.tablePrefix">JOB_QRTZ_</prop><!-- 表名前缀 -->
                <prop key="org.quartz.jobStore.isClustered">false</prop>
                <prop key="org.quartz.jobStore.clusterCheckinInterval">15000</prop>
                <prop key="org.quartz.jobStore.maxMisfiresToHandleAtATime">120</prop>
                <prop key="org.quartz.jobStore.misfireThreshold">60000</prop>
                <prop key="org.quartz.scheduler.jmx.export">true</prop><!-- 打开JMX 配置 -->
                <prop key="org.quartz.plugin.shutdownHook.class">org.quartz.plugins.management.ShutdownHookPlugin</prop>
                <prop key="org.quartz.plugin.shutdownHook.cleanShutdown">true</prop>
                <prop key="org.terracotta.quartz.skipUpdateCheck">true</prop>
                <prop key="org.quartz.plugin.triggHistory.class">org.quartz.plugins.history.LoggingJobHistoryPlugin</prop>
            </props>
        </property>
    </bean>

    <!-- quartz线程池 -->
    <bean id="quartzThreadPool" class="org.springframework.scheduling.concurrent.ThreadPoolTaskExecutor">
        <!-- 核心线程数  -->
        <property name="corePoolSize" value="100"/>
        <!-- 最大线程数 -->
        <property name="maxPoolSize" value="200"/>
        <!-- 队列最大长度 >=mainExecutor.maxSize -->
        <property name="queueCapacity" value="1000"/>
        <!-- 线程池维护线程所允许的空闲时间 -->
        <property name="keepAliveSeconds" value="300"/>
        <!-- 拒绝任务策略:被拒绝后直接在调用者线程中运行当前被放弃任务 -->
        <property name="rejectedExecutionHandler">
            <bean class="java.util.concurrent.ThreadPoolExecutor$CallerRunsPolicy"/>
        </property>
    </bean>
    <!-- 配置quartz end-->


</beans>





